{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Classify \u00b6 A lightweight MVC designed to be as simple,lightweight, and portable as possible. Features \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Classify"},{"location":"#classify","text":"A lightweight MVC designed to be as simple,lightweight, and portable as possible.","title":"Classify"},{"location":"#features","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Features"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"help/","text":"Help \u00b6 Reporting Bugs \u00b6 Making Contributions \u00b6","title":"Help"},{"location":"help/#help","text":"","title":"Help"},{"location":"help/#reporting-bugs","text":"","title":"Reporting Bugs"},{"location":"help/#making-contributions","text":"","title":"Making Contributions"},{"location":"requirements/","text":"Requirements \u00b6 Web Server \u00b6 Requirements Any up to date web hosting software (IIS, Apache...) URL Rewrite must be enabled on web server PHP 7.4 with LDAP enabled CA trust with Domain Controller certificates (Password Changes) Recommended A valid SSL certificate for website A Microsoft Windows web host","title":"Requirements"},{"location":"requirements/#requirements","text":"","title":"Requirements"},{"location":"requirements/#web-server","text":"Requirements Any up to date web hosting software (IIS, Apache...) URL Rewrite must be enabled on web server PHP 7.4 with LDAP enabled CA trust with Domain Controller certificates (Password Changes) Recommended A valid SSL certificate for website A Microsoft Windows web host","title":"Web Server"},{"location":"setup/","text":"Setup \u00b6 Web Server Setup \u00b6 Installing Classify \u00b6 Updating Classify \u00b6","title":"Setup"},{"location":"setup/#setup","text":"","title":"Setup"},{"location":"setup/#web-server-setup","text":"","title":"Web Server Setup"},{"location":"setup/#installing-classify","text":"","title":"Installing Classify"},{"location":"setup/#updating-classify","text":"","title":"Updating Classify"},{"location":"app/","text":"Introduction \u00b6","title":"Introduction"},{"location":"app/#introduction","text":"","title":"Introduction"},{"location":"app/controllers/","text":"Controllers \u00b6 What is a controller? \u00b6 The controller is a class (collection of functions and data) that work as the first part of a URI. It must have an index method or it will be invalid. The if the router found a method to call the app runs that method instead. How do I use one? \u00b6","title":"Controllers"},{"location":"app/controllers/#controllers","text":"","title":"Controllers"},{"location":"app/controllers/#what-is-a-controller","text":"The controller is a class (collection of functions and data) that work as the first part of a URI. It must have an index method or it will be invalid. The if the router found a method to call the app runs that method instead.","title":"What is a controller?"},{"location":"app/controllers/#how-do-i-use-one","text":"","title":"How do I use one?"},{"location":"app/models/","text":"Models \u00b6 What is a model? \u00b6 Models are just more classes that represent \"things\" you are manipulating in the app. Think of it like a workshop where you send some data to feed the workers and they spit out a perfectly polished ready to go product. When you need to work on things like the User ADUser's GAUser's anything that represents a collection of data, it is wise to use or create a model for it. How do I use one? \u00b6","title":"Models"},{"location":"app/models/#models","text":"","title":"Models"},{"location":"app/models/#what-is-a-model","text":"Models are just more classes that represent \"things\" you are manipulating in the app. Think of it like a workshop where you send some data to feed the workers and they spit out a perfectly polished ready to go product. When you need to work on things like the User ADUser's GAUser's anything that represents a collection of data, it is wise to use or create a model for it.","title":"What is a model?"},{"location":"app/models/#how-do-i-use-one","text":"","title":"How do I use one?"},{"location":"app/routing/","text":"Routing \u00b6 What is a router? \u00b6 The router class takes the incoming request (eg: http://localhost/test/show/all) and breaks it apart into a \"routable\" path for the app. In the example provided, the app would use the class named \"test\", create an object of it, and call the method (function) show, passing the parameter of \"all\". Any further extensions to the requested URI are ignored. All components of a route are optional, and are replaced with the defaults below if not provided. These defaults can be overrided in the Router.php file in app/config. Dealing with dashes \u00b6 If dashes (-) are used for an internal link the router will handle it by removing the dash and capitalizing the next letter. It will do this for both the controller and the method. For example, /account-status would become accountStatus. Default Parameter \u00b6 If no parameter is supplied, none is given to the called class->method. Default Method \u00b6 If no method is supplied, index will be used, unless otherwise specified. Default Class \u00b6 If no class is supplied, the Home class is used, unless otherwise specified.","title":"Routing"},{"location":"app/routing/#routing","text":"","title":"Routing"},{"location":"app/routing/#what-is-a-router","text":"The router class takes the incoming request (eg: http://localhost/test/show/all) and breaks it apart into a \"routable\" path for the app. In the example provided, the app would use the class named \"test\", create an object of it, and call the method (function) show, passing the parameter of \"all\". Any further extensions to the requested URI are ignored. All components of a route are optional, and are replaced with the defaults below if not provided. These defaults can be overrided in the Router.php file in app/config.","title":"What is a router?"},{"location":"app/routing/#dealing-with-dashes","text":"If dashes (-) are used for an internal link the router will handle it by removing the dash and capitalizing the next letter. It will do this for both the controller and the method. For example, /account-status would become accountStatus.","title":"Dealing with dashes"},{"location":"app/routing/#default-parameter","text":"If no parameter is supplied, none is given to the called class->method.","title":"Default Parameter"},{"location":"app/routing/#default-method","text":"If no method is supplied, index will be used, unless otherwise specified.","title":"Default Method"},{"location":"app/routing/#default-class","text":"If no class is supplied, the Home class is used, unless otherwise specified.","title":"Default Class"},{"location":"app/views/","text":"Views \u00b6 What is a view? \u00b6 Views are one of two things. Templates or content. Views connect the application data to the output the user will eventually see. The entire application is available to an app view (different for system views) so any public data is readily accessible, but keep the necessary data inside the controller method that is rendering the view to keep scopes small. Examples \u00b6 The HTML start and end tags along with the Bootstrap 4 CSS framework is loaded through a template in the system views folder. The navigation menu is a template that pulls data from the Menu object that renders it. The homepage is a content segment that contains only div's. It is loaded in-between the app header and footer templates. How do I use one? \u00b6 Keep as much processing in the controller as possible, avoid putting heavy logic/calculation in the views themselves.","title":"Views"},{"location":"app/views/#views","text":"","title":"Views"},{"location":"app/views/#what-is-a-view","text":"Views are one of two things. Templates or content. Views connect the application data to the output the user will eventually see. The entire application is available to an app view (different for system views) so any public data is readily accessible, but keep the necessary data inside the controller method that is rendering the view to keep scopes small.","title":"What is a view?"},{"location":"app/views/#examples","text":"The HTML start and end tags along with the Bootstrap 4 CSS framework is loaded through a template in the system views folder. The navigation menu is a template that pulls data from the Menu object that renders it. The homepage is a content segment that contains only div's. It is loaded in-between the app header and footer templates.","title":"Examples"},{"location":"app/views/#how-do-i-use-one","text":"Keep as much processing in the controller as possible, avoid putting heavy logic/calculation in the views themselves.","title":"How do I use one?"},{"location":"system/","text":"Introduction \u00b6 Overview \u00b6 The system folder is the store of all system and common app classes. It is not a place that should be modified without serious caution. DO NOT EDIT THESE FILES UNLESS YOU KNOW WHAT YOU ARE DOING! The file /system/Core.php is the master program file and controls all child operations from then on. Email support is provided by PHPMailer. Base CSS is provided by BootStrap4 (requires IE>9). The system/app operates on the Class/Object principle. Refer to the UML when coding. Adding features is most often done either by creating new Classes that \"Model\" an object that the application needs to perform complex operations on, or by extending one of the core classes to build upon the included functionality of said core class. Important Notes \u00b6 Application stream output (eg:echo) is blocked if the system is not in debug mode The HTML tags and loading of the BootStrap4 CSS Framework are handled by the system renderer. There are two options to override this style: Override the style with a custom css in the application, available to clients via the public folder Disable BootStrap4 in the system config and create a complete custom CSS for the app (don't forget to style the system/app log outputs) App Output \u00b6 It is important to know that the app object and it's children are not allowed to print directly to the output (while system debug is off). For example, echo \"test\";would not print test on the page. All application output from child objects need to be buffered through the parser and then returned to the app and then up to the core as a string. To capture the output of a command the view function must be used, then you would add the return value to the classes output variable, and the calling class must extend the system Parser class. The core is responsible for actually sending the application output string to the client. If you need to grab information from inside the app you can use the debug logger or return early with the information you're looking for. System Configuration File \u00b6 Path \u00b6 The system config file is located in /system/Config.php Default Contents \u00b6 The system config file is very important. It prepares all the constant variables for the core system. An error in this file leads to core failure. The contents of this file are loaded directly into the core and then executed. Be careful what you put in here.","title":"Introduction"},{"location":"system/#introduction","text":"","title":"Introduction"},{"location":"system/#overview","text":"The system folder is the store of all system and common app classes. It is not a place that should be modified without serious caution. DO NOT EDIT THESE FILES UNLESS YOU KNOW WHAT YOU ARE DOING! The file /system/Core.php is the master program file and controls all child operations from then on. Email support is provided by PHPMailer. Base CSS is provided by BootStrap4 (requires IE>9). The system/app operates on the Class/Object principle. Refer to the UML when coding. Adding features is most often done either by creating new Classes that \"Model\" an object that the application needs to perform complex operations on, or by extending one of the core classes to build upon the included functionality of said core class.","title":"Overview"},{"location":"system/#important-notes","text":"Application stream output (eg:echo) is blocked if the system is not in debug mode The HTML tags and loading of the BootStrap4 CSS Framework are handled by the system renderer. There are two options to override this style: Override the style with a custom css in the application, available to clients via the public folder Disable BootStrap4 in the system config and create a complete custom CSS for the app (don't forget to style the system/app log outputs)","title":"Important Notes"},{"location":"system/#app-output","text":"It is important to know that the app object and it's children are not allowed to print directly to the output (while system debug is off). For example, echo \"test\";would not print test on the page. All application output from child objects need to be buffered through the parser and then returned to the app and then up to the core as a string. To capture the output of a command the view function must be used, then you would add the return value to the classes output variable, and the calling class must extend the system Parser class. The core is responsible for actually sending the application output string to the client. If you need to grab information from inside the app you can use the debug logger or return early with the information you're looking for.","title":"App Output"},{"location":"system/#system-configuration-file","text":"","title":"System Configuration File"},{"location":"system/#path","text":"The system config file is located in /system/Config.php","title":"Path"},{"location":"system/#default-contents","text":"The system config file is very important. It prepares all the constant variables for the core system. An error in this file leads to core failure. The contents of this file are loaded directly into the core and then executed. Be careful what you put in here.","title":"Default Contents"},{"location":"system/ajax/","text":"AJAX \u00b6","title":"AJAX"},{"location":"system/ajax/#ajax","text":"","title":"AJAX"},{"location":"system/appOutput/","text":"AppOutput \u00b6","title":"AppOutput"},{"location":"system/appOutput/#appoutput","text":"","title":"AppOutput"},{"location":"system/constants/","text":"Constants \u00b6 Constants are static variables that are available through an execution thread of a PHP app. The system uses constants to define resource paths within the application. Constants should only be defined in the system config file. The following constants are defined. ROOTPATH \u00b6 Defines the root working directory of the web framework. This is defined in the core as the first command. It is referenced by the execution of chdir(\"../\"); in the public index. This should never be modified. APPPATH \u00b6 Defines the path to the app folder. By default this relies on the ROOTPATH being already defined. This can be changed if the folder is moved/renamed. VIEWPATH \u00b6 Defines the path to the views folder. By default this relies on the APPPATH being already defined. This can be changed if the folder is moved/renamed. DEBUG_MODE \u00b6 Defines the state of debug logging and drawing for the system core. Turn this on to debug the core files. Debug A debug mode for the system is available in the event that a system bug is suspected. To enable debug mode change the appropriate value in the system config file.","title":"Constants"},{"location":"system/constants/#constants","text":"Constants are static variables that are available through an execution thread of a PHP app. The system uses constants to define resource paths within the application. Constants should only be defined in the system config file. The following constants are defined.","title":"Constants"},{"location":"system/constants/#rootpath","text":"Defines the root working directory of the web framework. This is defined in the core as the first command. It is referenced by the execution of chdir(\"../\"); in the public index. This should never be modified.","title":"ROOTPATH"},{"location":"system/constants/#apppath","text":"Defines the path to the app folder. By default this relies on the ROOTPATH being already defined. This can be changed if the folder is moved/renamed.","title":"APPPATH"},{"location":"system/constants/#viewpath","text":"Defines the path to the views folder. By default this relies on the APPPATH being already defined. This can be changed if the folder is moved/renamed.","title":"VIEWPATH"},{"location":"system/constants/#debug_mode","text":"Defines the state of debug logging and drawing for the system core. Turn this on to debug the core files. Debug A debug mode for the system is available in the event that a system bug is suspected. To enable debug mode change the appropriate value in the system config file.","title":"DEBUG_MODE"},{"location":"system/encryption/","text":"Encryption \u00b6","title":"Encryption"},{"location":"system/encryption/#encryption","text":"","title":"Encryption"},{"location":"system/file/","text":"File \u00b6","title":"File"},{"location":"system/file/#file","text":"","title":"File"},{"location":"system/get/","text":"Get \u00b6","title":"Get"},{"location":"system/get/#get","text":"","title":"Get"},{"location":"system/lang/","text":"Lang \u00b6","title":"Lang"},{"location":"system/lang/#lang","text":"","title":"Lang"},{"location":"system/logging/","text":"Logging \u00b6","title":"Logging"},{"location":"system/logging/#logging","text":"","title":"Logging"},{"location":"system/parser/","text":"Parser \u00b6 The Parser class is the link between the app and the core output. By using this class's view function, the contents of any file can be executed and displayed. Usage \u00b6 Because echo from within the app is not allowed, unless the system is in debug mode, the return value from the view function must be returned up the tree to the App outputBody variable. It is then combined with the desired layout. When within a view you can use echo anywhere, and the objects within the controller will be available to the view. If you want to show another view within a view use echo $this->view('viewname'); , there is no limit to nesting of this command.","title":"Parser"},{"location":"system/parser/#parser","text":"The Parser class is the link between the app and the core output. By using this class's view function, the contents of any file can be executed and displayed.","title":"Parser"},{"location":"system/parser/#usage","text":"Because echo from within the app is not allowed, unless the system is in debug mode, the return value from the view function must be returned up the tree to the App outputBody variable. It is then combined with the desired layout. When within a view you can use echo anywhere, and the objects within the controller will be available to the view. If you want to show another view within a view use echo $this->view('viewname'); , there is no limit to nesting of this command.","title":"Usage"},{"location":"system/post/","text":"Post \u00b6","title":"Post"},{"location":"system/post/#post","text":"","title":"Post"},{"location":"system/renderer/","text":"Renderer \u00b6","title":"Renderer"},{"location":"system/renderer/#renderer","text":"","title":"Renderer"},{"location":"system/request/","text":"Request \u00b6","title":"Request"},{"location":"system/request/#request","text":"","title":"Request"}]}